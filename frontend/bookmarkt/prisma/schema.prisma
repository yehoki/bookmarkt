// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UserBookData {
  bookId       String @db.ObjectId
  bookProgress Int
}

type Bookshelf {
  name      String
  bookIds   String[]
  isDefault Boolean
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  bookProgress   UserBookData[]
  bookshelves    Bookshelf[]
  bookIds        String[]       @db.ObjectId
  reviewIds      String[]       @db.ObjectId

  books    Book[]    @relation(fields: [bookIds], references: [id])
  reviews  Review[]
  accounts Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

type ImageLinks {
  smallThumbnail String?
  thumbnail      String?
  small          String?
  medium         String?
  large          String?
  extraLarge     String?
}

type ReviewData {
  totalReviews  Int
  averageReview Float //set it to 2 d.p. 
}

// TODO: Add reviewData as a field in books to store their review data instead of refetching it everytime

model Book {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  googleId      String
  title         String
  subtitle      String
  author        String[]
  description   String
  imageLinks    ImageLinks
  publishedDate String
  userIds       String[]   @db.ObjectId
  reviewIds     String[]   @db.ObjectId
  reviewData    ReviewData
  ISBN          String

  reviews Review[]
  user    User[]   @relation(fields: [userIds], references: [id])
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  description String?
  bookId      String   @db.ObjectId
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
