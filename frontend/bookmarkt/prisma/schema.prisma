// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UserBookData {
  bookId       String @db.ObjectId
  bookProgress Int
}

type BookshelfBooks {
  googleBookId       String
  addedToBookShelfAt DateTime @default(now())
}

model Bookshelf {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  googleBooks BookshelfBooks[]
  isDefault   Boolean
  userId      String           @db.ObjectId

  user User @relation(fields: [userId], references: [id])
}

enum NotificationType {
  FRIENDREQUEST
  REQUESTACCEPTED
}

model Notification {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  userId           String           @db.ObjectId
  userName         String?
  createdAt        DateTime         @default(now())
  notificationInfo String
  notificationType NotificationType @default(FRIENDREQUEST)
  fromUserId       String           @db.ObjectId

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type ReadingChallenge {
  target  Int
  current Int
}

model User {
  id                     String           @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?          @unique
  emailVerified          DateTime?
  image                  String?
  hashedPassword         String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  bookProgress           UserBookData[]
  readingChallenge       ReadingChallenge?
  bookshelfIds           String[]         @db.ObjectId
  googleBookIds          String[]
  reviewIds              String[]         @db.ObjectId
  friendIds              String[]         @db.ObjectId
  notificationIds        String[]         @db.ObjectId
  friendRequestsReceived String[]         @db.ObjectId
  friendRequestsSent     String[]         @db.ObjectId

  reviews       Review[]
  accounts      Account[]
  bookshelves   Bookshelf[]
  bookData      BookData[]     @relation(fields: [googleBookIds], references: [googleId])
  friends       User[]         @relation(name: "Friends", fields: [friendIds], references: [id])
  friendsOf     User[]         @relation(name: "Friends", fields: [friendIds], references: [id])
  notifications Notification[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

type ImageLinks {
  smallThumbnail String?
  thumbnail      String?
  small          String?
  medium         String?
  large          String?
  extraLarge     String?
}

type ReviewData {
  totalReviews  Int
  averageReview Float //set it to 2 d.p. 
}

// TODO: Remove the Book model and replace it everywhere with fetching the book from a google Book Id

model BookData {
  googleId   String     @id @map("_id")
  userIds    String[]   @db.ObjectId
  reviewIds  String[]   @db.ObjectId
  reviewData ReviewData

  users   User[]   @relation(fields: [userIds], references: [id])
  reviews Review[]
}

model Review {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  rating       Int
  description  String?
  googleBookId String
  userId       String   @db.ObjectId
  createdAt    DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  bookData BookData @relation(fields: [googleBookId], references: [googleId])
}
